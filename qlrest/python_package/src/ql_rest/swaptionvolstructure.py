# Autogenerated from the following stub : ql_rest/gensrc/stubs/stub.qlrest.python_module

# swaptionvolstructure_py
# swaptionvolstructure_py


import json
from json import JSONEncoder

class qlConstantSwaptionVolatility(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.NDays = 0;
        self.Calendar = "";
        self.BusinessDayConvention = "";
        self.Volatility = 0.0;
        self.DayCounter = "";
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlRelinkableHandleSwaptionVolatilityStructure(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.CurrentLink = "";
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlSmileSectionByCube(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.VolCube = "";
        self.OptionDate = "";
        self.SwapTenor = "";
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlSmileSectionByCube2(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.VolCube = "";
        self.OptionDate = "";
        self.SwapTenor = "";
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlSpreadedSwaptionVolatility(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.BaseVolStructure = "";
        self.Spread = 0.0;
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlSwaptionVTSMatrix(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.Calendar = "";
        self.BusinessDayConvention = "";
        self.OptionTenors = [];
        self.SwapTenors = [];
        self.Volatilities = {};
        self.DayCounter = "";
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlSwaptionVolCube1(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.AtmVolStructure = "";
        self.OptionTenors = [];
        self.SwapTenors = [];
        self.StrikeSpreads = [];
        self.SpreadVols = {};
        self.SwapIndexBase = "";
        self.ShortSwapIndexBase = "";
        self.VegaWeightedSmileFit = False;
        self.Guess = {};
        self.IsFixed = [];
        self.IsAtmCalibrated = False;
        self.EndCriteria = "";
        self.MaxErrorTol = 0.0;
        self.OptMethod = "";
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__

import json
from json import JSONEncoder

class qlSwaptionVolCube2(JSONEncoder):

    def __init__(self):
        self.instanceID = ""
        
        self.ObjectId = "";
        self.AtmVolStructure = "";
        self.OptionTenor = [];
        self.SwapTenor = [];
        self.StrikeSpreads = [];
        self.SpreadVols = {};
        self.SwapIndexBase = "";
        self.ShortSwapIndexBase = "";
        self.VegaWeightedSmileFit = False;
        self.Permanent = False;
        self.Trigger = False;
        self.Overwrite = False;

    def default(self, o):
        return o.__dict__
