<Category name='cmsmarketcalibration'>
  <description>functions to construct and use CmsMarketCalibration objects.</description>
  <displayName>Cms Market Calibration</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/cmsmarketcalibration.hpp</include>
    <include>qlo/cmsmarket.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>ql/termstructures/volatility/swaption/swaptionvolcube1.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/cmsmarketcalibration.hpp</include>
    <include>qlo/cmsmarket.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>ql/termstructures/volatility/swaption/swaptionvolcube1.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006 Giorgio Facchinetti
  </copyright>
  <Functions>

    <!-- CmsMarketCalibration constructors -->

    <Constructor name='qlCmsMarketCalibration'>
      <libraryFunction>CmsMarketCalibration</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='VolCube' >
            <type>QuantLib::SwaptionVolatilityStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Volatility Cube by Sabr.</description>
          </Parameter>
          <Parameter name='CmsMarket'>
            <type>QuantLib::CmsMarket</type>
            <tensorRank>scalar</tensorRank>
            <description>CmsMarket object ID.</description>
          </Parameter>
          <Parameter name='Weights'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>weights for cms market calibration.</description>
          </Parameter>
          <Parameter name='CalibrationType'>
            <type>QuantLib::CmsMarketCalibration::CalibrationType</type>
            <tensorRank>scalar</tensorRank>
            <description>calibration type (e.g. OnSpread, OnPrice, OnForwardPrice).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlCmsMarketCalibrationCompute' type='QuantLibAddin::CmsMarketCalibration'>
      <description>Return the best beta and mean reversion.</description>
      <libraryFunction>compute</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EndCriteria' default='""'>
            <type>QuantLib::EndCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>EndCriteria object ID.</description>
          </Parameter>
          <Parameter name='OptimizationMethod' default='""'>
            <type>QuantLib::OptimizationMethod</type>
            <tensorRank>scalar</tensorRank>
            <description>OptimizationMethod object ID.</description>
          </Parameter>
          <Parameter name='Guess'>
            <type>QuantLib::Array</type>
            <tensorRank>vector</tensorRank>
            <description>guess.</description>
          </Parameter>
          <Parameter name='IsMeanRevFixed' exampleValue = 'FALSE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>if TRUE mean reversion parameter is not calibrated, the guess is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Array</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCmsMarketCalibrationError' type='QuantLib::CmsMarketCalibration'>
      <description>Returns the error of the simultaneous calibration.</description>
      <libraryFunction>error</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCmsMarketCalibrationEndCriteria' type='QuantLib::CmsMarketCalibration'>
      <description>Returns the optimization end criteria of the simultaneous calibration.</description>
      <libraryFunction>endCriteria</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::EndCriteria::Type</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCmsMarketCalibrationElapsed' type='QuantLibAddin::CmsMarketCalibration'>
      <description>Returns the elapsed time of the simultaneous calibration.</description>
      <libraryFunction>elapsed</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCmsMarketCalibrationSparseSabrParameters' type='QuantLibAddin::CmsMarketCalibration'>
      <description>returns results of Sabr calibration.</description>
      <libraryFunction>getSparseSabrParameters</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCmsMarketCalibrationDenseSabrParameters' type='QuantLibAddin::CmsMarketCalibration'>
      <description>returns results of Sabr calibration.</description>
      <libraryFunction>getDenseSabrParameters</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSimultaneousCalibrationBrowseCmsMarket' type='QuantLibAddin::CmsMarketCalibration'>
      <description>return the market and implied spreads matrix.</description>
      <libraryFunction>getCmsMarket</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

  </Functions>
</Category>
