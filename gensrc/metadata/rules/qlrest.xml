
<root>

  <RuleGroups>

    <RuleGroup name='pyDeclaration' indent='2' delimiter=';&#10;'>
      <Wrap>&#10;%s;</Wrap>
      <Rules>
        <Rule tensorRank='scalar' type='QuantLib::Date'>%(indent)sself.%(name)s = ""</Rule>
        <Rule tensorRank='scalar' superType='libraryClass' type='QuantLib::Quote'>%(indent)sself.%(name)s = 0.0</Rule>
        <Rule tensorRank='scalar' superType='libToHandle' type='QuantLib::Quote'>%(indent)sself.%(name)s = 0.0</Rule>
        <Rule tensorRank='scalar' nativeType='any'>%(indent)sself.%(name)s = False</Rule>
        <Rule tensorRank='scalar' nativeType='bool'>%(indent)sself.%(name)s = False</Rule>
        <Rule tensorRank='scalar' nativeType='string'>%(indent)sself.%(name)s = ""</Rule>
        <Rule tensorRank='scalar' nativeType='double'>%(indent)sself.%(name)s = 0.0</Rule>
        <Rule tensorRank='scalar' nativeType='int'>%(indent)sself.%(name)s = 0</Rule>
        <Rule tensorRank='scalar'>%(indent)sself.%(name)s = 0</Rule>
        <Rule tensorRank='vector'>%(indent)sself.%(name)s = []</Rule>
        <Rule tensorRank='matrix'>%(indent)sself.%(name)s = {}</Rule>
       </Rules>
    </RuleGroup>

    <RuleGroup name='functionDeclaration' indent='3' delimiter=',&#10;'>
      <Wrap>&#10;%s</Wrap>
      <Rules>
        <Rule tensorRank='vector' nativeType='double'> %(indent)s ql_rest::vector_cast&lt;%(nativeType)s&gt;(json_obj["%(name)s"].as_array())</Rule>
        <!-- <Rule tensorRank='vector' type='QuantLib::Quote' nativeType="string">%(indent)s ql_rest::vector_cast&lt;ObjectHandler::property_t,std::string&gt;(json_obj["%(name)s"].as_array())</Rule> -->
        <!-- <Rule tensorRank='vector' type='QuantLib::Quote'>%(indent)s ql_rest::vector_cast&lt;ObjectHandler::property_t,%(nativeType)s&gt;(json_obj["%(name)s"].as_array())</Rule> -->
        <Rule tensorRank='vector' type='QuantLib::Quote'>%(indent)s ql_rest::vector_cast&lt;ObjectHandler::property_t,double&gt;(json_obj["%(name)s"].as_array())</Rule>
        <Rule tensorRank='vector' type='QuantLib::Period'>%(indent)s ql_rest::vector_cast&lt;ObjectHandler::property_t,std::string&gt;(json_obj["%(name)s"].as_array())</Rule>
        <Rule tensorRank='vector' type='QuantLib::Date'>%(indent)s ql_rest::vector_cast&lt;ObjectHandler::property_t,%(nativeType)s&gt;(json_obj["%(name)s"].as_array())</Rule>
        <Rule tensorRank='vector' nativeType='string'> %(indent)s ql_rest::vector_cast&lt;std::string&gt;(json_obj["%(name)s"].as_array())</Rule>
        <Rule tensorRank='vector' nativeType='string'> %(indent)s ql_rest::vector_cast&lt;std::string&gt; ( json_obj["%(name)s"].as_array() )</Rule>
        <Rule tensorRank='vector'> %(indent)s ql_rest::vector_cast&lt;%(nativeType)s&gt;(json_obj["%(name)s"].as_array())</Rule>
        <Rule tensorRank='matrix' type='QuantLib::Quote' nativeType="string">%(indent)s ql_rest::matrix_cast&lt;ObjectHandler::property_t,std::string&gt;(json_obj["%(name)s"].as_object())</Rule>
        <Rule tensorRank='matrix' nativeType='string'>%(indent)s ql_rest::matrix_cast&lt;std::string&gt;( json_obj["%(name)s"].as_object() )</Rule>
        <Rule tensorRank='matrix' nativeType='double'>%(indent)s ql_rest::matrix_cast&lt;%(nativeType)s&gt;( json_obj["%(name)s"].as_object() )</Rule>
        <Rule tensorRank='scalar' type='QuantLib::Real'> %(indent)s json_obj["%(name)s"].is_double() ? json_obj["%(name)s"].as_double() : json_obj["%(name)s"].as_int64() </Rule>
        <Rule tensorRank='scalar' type='QuantLib::Natural'> %(indent)s boost::json::value_to&lt;long&gt;(json_obj["%(name)s"])</Rule>
        <Rule tensorRank='scalar' type='QuantLib::Date' default='true'> %(indent)s ql_rest::from_iso_string_to_oh_property(boost::json::value_to&lt;std::string&gt;(json_obj["%(name)s"]))</Rule>
        <Rule tensorRank='scalar' type='QuantLib::Date'> %(indent)s ql_rest::from_iso_string(boost::json::value_to&lt;std::string&gt;(json_obj["%(name)s"]))</Rule>
        <Rule tensorRank='scalar' type='QuantLib::Quote'> %(indent)s json_obj["%(name)s"].is_double() ? boost::json::value_to&lt;double&gt;(json_obj["%(name)s"]) : boost::json::value_to&lt;long&gt;(json_obj["%(name)s"]) </Rule>
        <Rule tensorRank='scalar' type='QuantLib::Size'> %(indent)s long(json_obj["%(name)s"].as_int64())</Rule>
        <Rule tensorRank='scalar' nativeType='string'> %(indent)s boost::json::value_to&lt;std::string&gt;(json_obj["%(name)s"])</Rule>
        <Rule tensorRank='scalar' nativeType='double'> %(indent)s json_obj["%(name)s"].is_double() ? boost::json::value_to&lt;double&gt;(json_obj["%(name)s"]) : boost::json::value_to&lt;long&gt;(json_obj["%(name)s"])</Rule>
        <Rule tensorRank='scalar' nativeType='any'> %(indent)s json_obj["%(name)s"].as_bool()</Rule>
        <Rule tensorRank='scalar'> %(indent)s json_obj["%(name)s"].as_bool()</Rule>
        <Rule tensorRank='scalar' nativeType='string'>%(indent)s static_cast&lt;std::%(nativeType)s &gt;(obj.%(name)s)</Rule>
        <Rule tensorRank='scalar' superType='libraryClass' type='QuantLib::Quote'>%(indent)s ObjectHandler::property_t (static_cast&lt;std::%(nativeType)s &gt;(obj.%(name)s))</Rule>
        <Rule tensorRank='scalar' nativeType='any'>%(indent)s ObjectHandler::property_t ( static_cast&lt;bool&gt;(obj.%(name)s) )</Rule>
        <Rule tensorRank='scalar' nativeType='string' default='true'>%(indent)s ObjectHandler::property_t (static_cast&lt;std::%(nativeType)s &gt;(obj.%(name)s))</Rule>
        <Rule tensorRank='scalar' default='true'>%(indent)s ObjectHandler::property_t (static_cast&lt;%(nativeType)s &gt;(obj.%(name)s))</Rule>
        <Rule tensorRank='scalar' nativeType='string'>%(indent)s static_cast&lt; const std::string &gt; (obj.%(name)s)</Rule>
        <Rule tensorRank='scalar'>%(indent)s static_cast&lt;%(nativeType)s&gt; (obj.%(name)s)</Rule>
        <Rule tensorRank='vector' nativeType='any'>%(indent)s std::vector&lt;ObjectHandler::property_t&gt; ( static_cast&lt;%(nativeType)s &gt;(obj.%(name)s) )</Rule>
        <Rule tensorRank='matrix' nativeType='string'>%(indent)s std::vector&lt;std::vector &lt;std::string&gt; &gt; (obj.%(name)s)</Rule>
        <Rule tensorRank='matrix'>%(indent)s std::vector&lt;std::vector&lt;%(nativeType)s&gt; &gt; (obj.%(name)s)</Rule>
      </Rules>
    </RuleGroup>

    <RuleGroup name='functionReturnType'>
      <Wrap>&#10;%s</Wrap>
      <Rules>
	<Rule default='true'>ObjectHandler::property_t</Rule>
        <Rule tensorRank='scalar' nativeType='string'>String</Rule>
        <Rule tensorRank='scalar' nativeType='any'>Property</Rule>
        <Rule tensorRank='scalar' nativeType='void'>bool</Rule>
        <Rule tensorRank='scalar'>%(nativeType)s</Rule>
        <Rule tensorRank='vector' nativeType='string'>stringVector</Rule>
        <Rule tensorRank='vector' nativeType='any'>std::vector&lt;ObjectHandler::property_t&gt;</Rule>
        <Rule tensorRank='vector'>std::vector&lt;%(nativeType)s&gt;</Rule>
        <Rule tensorRank='matrix' nativeType='string'>std::vector&lt;std::vector&lt;std::string&gt; &gt;</Rule>
        <Rule tensorRank='matrix'>std::vector&lt;std::vector&lt;%(nativeType)s&gt; &gt;</Rule>
      </Rules>
    </RuleGroup>

  </RuleGroups>

</root>
